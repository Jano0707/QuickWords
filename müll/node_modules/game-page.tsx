import { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { useToast } from "@/components/ui/use-toast"

export default function GamePage() {
  const [timer, setTimer] = useState(20)
  const [isTimerRunning, setIsTimerRunning] = useState(false)
  const [activeLetters, setActiveLetters] = useState(Array(26).fill(true))
  const [word, setWord] = useState('')
  const [category, setCategory] = useState('Tiere') // Beispielkategorie
  const [score, setScore] = useState(0)
  const { toast } = useToast()

  useEffect(() => {
    let interval: NodeJS.Timeout
    if (isTimerRunning && timer > 0) {
      interval = setInterval(() => setTimer((prev) => prev - 1), 1000)
    } else if (timer === 0) {
      handleTimerEnd()
    }
    return () => clearInterval(interval)
  }, [isTimerRunning, timer])

  const startTimer = () => {
    setIsTimerRunning(true)
  }

  const handleTimerEnd = () => {
    setIsTimerRunning(false)
    // Hier würden Sie die Logik für das Rundenende implementieren
    toast({
      title: "Zeit abgelaufen!",
      description: "Nächster Spieler ist an der Reihe.",
    })
  }

  const handleLetterClick = (index: number) => {
    if (activeLetters[index] && isTimerRunning) {
      setActiveLetters((prev) => {
        const newActive = [...prev]
        newActive[index] = false
        return newActive
      })
      // Hier würden Sie die Logik für die Worteingabe implementieren
    }
  }

  const handleWordSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (word.length > 0) {
      // Hier würden Sie die Wortüberprüfung implementieren
      setScore((prev) => prev + word.length)
      setWord('')
      setTimer(20)
      toast({
        title: "Wort akzeptiert!",
        description: `${word} wurde zur Punktzahl hinzugefügt.`,
      })
    }
  }

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-purple-900 via-blue-900 to-cyan-900 text-white p-4">
      <h1 className="text-4xl font-bold mb-4">Think Words</h1>
      <div className="text-2xl mb-8">Kategorie: {category}</div>
      <div className="text-xl mb-4">Punktzahl: {score}</div>
      <div className="relative w-64 h-64 mb-8">
        <svg viewBox="0 0 100 100" className="w-full h-full">
          <circle cx="50" cy="50" r="45" fill="white" />
          <text x="50" y="50" textAnchor="middle" dominantBaseline="central" fontSize="24" fill="black">
            {timer}
          </text>
        </svg>
        <Button 
          className="absolute inset-0 rounded-full bg-transparent hover:bg-white/10"
          onClick={startTimer}
          disabled={isTimerRunning}
        />
      </div>
      <div className="grid grid-cols-6 gap-2 mb-8">
        {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter, index) => (
          <Button
            key={letter}
            disabled={!activeLetters[index] || !isTimerRunning}
            onClick={() => handleLetterClick(index)}
            className={`w-12 h-12 text-xl ${
              activeLetters[index] ? 'bg-blue-500 hover:bg-blue-600' : 'bg-gray-500'
            }`}
          >
            {letter}
          </Button>
        ))}
      </div>
      <form onSubmit={handleWordSubmit} className="w-full max-w-md flex space-x-2">
        <Input
          type="text"
          value={word}
          onChange={(e) => setWord(e.target.value)}
          placeholder="Wort eingeben"
          className="flex-grow bg-gray-700 text-white"
        />
        <Button type="submit" disabled={!isTimerRunning}>
          Bestätigen
        </Button>
      </form>
    </div>
  )
}